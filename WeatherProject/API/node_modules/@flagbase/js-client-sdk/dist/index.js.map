{"version":3,"file":"index.js","mappings":"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","sources":["webpack://FlagbaseClient/webpack/universalModuleDefinition","webpack://FlagbaseClient/./src/api/api.ts","webpack://FlagbaseClient/./src/api/index.ts","webpack://FlagbaseClient/./src/client/client.ts","webpack://FlagbaseClient/./src/client/index.ts","webpack://FlagbaseClient/./src/context/config.ts","webpack://FlagbaseClient/./src/context/context.ts","webpack://FlagbaseClient/./src/context/flags.ts","webpack://FlagbaseClient/./src/context/identity.ts","webpack://FlagbaseClient/./src/context/index.ts","webpack://FlagbaseClient/./src/context/internal-data.ts","webpack://FlagbaseClient/./src/events/event-type.ts","webpack://FlagbaseClient/./src/events/events.ts","webpack://FlagbaseClient/./src/events/index.ts","webpack://FlagbaseClient/./src/fetch/constants.ts","webpack://FlagbaseClient/./src/fetch/fetch-flag-via-poller.ts","webpack://FlagbaseClient/./src/fetch/index.ts","webpack://FlagbaseClient/./src/index.ts","webpack://FlagbaseClient/./src/transport/index.ts","webpack://FlagbaseClient/./src/transport/poller.ts","webpack://FlagbaseClient/./src/transport/streamer.ts","webpack://FlagbaseClient/./src/transport/transport.ts","webpack://FlagbaseClient/./src/util/object-hash.ts","webpack://FlagbaseClient/webpack/bootstrap","webpack://FlagbaseClient/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"FlagbaseClient\"] = factory();\n\telse\n\t\troot[\"FlagbaseClient\"] = factory();\n})(this, () => {\nreturn ","import {\n  Flagset,\n  Identity,\n  Flag,\n  IContext,\n  InternalData,\n} from \"../context\";\nimport { EventProducer, EventType } from \"../events\";\n\nexport interface IApi {\n  variation: (\n    flagKey: string,\n    defaultVariationKey: string\n  ) => Flag[\"variationKey\"];\n  getIdentifier: () => Identity[\"identifier\"];\n  setIdentifier: (identifier: string) => void;\n  getAllTraits: () => Identity[\"traits\"];\n  getTrait: (traitKey: string) => string | number;\n  setTrait: (traitKey: string, traitValue: string | number) => void;\n  getAllFlags: () => Flagset;\n  getInternalData: () => InternalData;\n}\n\nexport default function Api(context: IContext, events: EventProducer): IApi {\n  const variation: IApi[\"variation\"] = (flagKey, defaultVariationKey) => {\n    return context.getFlag(flagKey)?.variationKey || defaultVariationKey;\n  };\n\n  const getIdentifier: IApi[\"getIdentifier\"] = () =>\n    context.getIdentity()[\"identifier\"];\n\n  const setIdentifier: IApi[\"setIdentifier\"] = (identifier) => {\n    context.setIdentity({ identifier });\n    events.emit(\n      EventType.CONTEXT_CHANGE,\n      `Updated identifier, identifier=${identifier}`,\n      getIdentifier()\n    );\n  };\n\n  const getAllTraits: IApi[\"getAllTraits\"] = () => context.getIdentityTraits();\n\n  const getTrait: IApi[\"getTrait\"] = (traitKey) => getAllTraits()[traitKey];\n\n  const setTrait: IApi[\"setTrait\"] = (traitKey, traitValue) => {\n    context.setIdentityTraits({ [traitKey]: traitValue });\n    events.emit(\n      EventType.CONTEXT_CHANGE,\n      `Updated trait, ${traitKey}=${JSON.stringify(traitValue)}`,\n      getAllTraits()\n    );\n  };\n\n  const getAllFlags: IApi[\"getAllFlags\"] = () => context.getAllFlags();\n\n  const getInternalData: IApi[\"getInternalData\"] = () =>\n    context.getInternalData();\n\n  return {\n    variation,\n    getIdentifier,\n    setIdentifier,\n    getAllTraits,\n    getTrait,\n    setTrait,\n    getAllFlags,\n    getInternalData,\n  };\n}\n","import Api, { IApi } from './api';\n\nexport { IApi };\nexport default Api;\n","import Api, { IApi } from \"../api\";\nimport Context, { Config, Identity, Mode } from \"../context\";\nimport Events, { EventConsumer, EventType } from \"../events\";\nimport Transport from \"../transport\";\n\nexport type ClientOptions = Config;\n\nexport interface IClient extends IApi, EventConsumer {\n  destroy: () => void;\n}\n\nexport default function Client(\n  clientKey: string,\n  identity: Identity,\n  opts?: ClientOptions\n): IClient {\n  const config: Config = {\n    mode: Mode.POLLING,\n    ...opts,\n  };\n  const events = Events();\n  const context = Context(clientKey, config, identity);\n  const transport = Transport(clientKey, context, events);\n  const api = Api(context, events);\n\n  transport.start();\n\n  const { on, off, clear } = events;\n\n  const destroy = () => {\n    clear();\n    transport.stop();\n  };\n\n  return {\n    ...api,\n    on,\n    off,\n    clear,\n    destroy,\n  };\n}\n","import Client, {\n    ClientOptions,\n    IClient\n} from './client';\n\nexport {\n    IClient\n};\nexport type {\n    ClientOptions\n};\nexport default Client;","export enum Mode {\n  HYBRID,\n  POLLING,\n  STREAMING,\n}\nexport type Config = {\n  mode?: Mode;\n  pollingServiceUrl?: string;\n  pollingIntervalMs?: number;\n};\n\nexport const DEFAULT_CONFIG: Config = {\n  mode: Mode.POLLING,\n  pollingServiceUrl: 'https://poller.core.flagbase.com',\n  pollingIntervalMs: 300000\n}\n","import { Config, DEFAULT_CONFIG } from \"./config\";\nimport { Identity, DEFAULT_IDENTITY } from \"./identity\";\nimport { Flagset, Flag } from \"./flags\";\nimport { DEFAULT_INTERNAL_DATA, InternalData } from \"./internal-data\";\nimport objectHash from '../util/object-hash';\n\nexport interface IContext {\n  // config\n  getConfig: () => Config;\n  setConfig: (c: Partial<Config>) => void;\n  // identity\n  getIdentity: () => Identity;\n  setIdentity: (i: Partial<Identity>) => void;\n  getIdentityTraits: () => Identity[\"traits\"];\n  setIdentityTraits: (identityTraits: Identity[\"traits\"]) => void;\n  // flagset\n  getAllFlags: () => Flagset;\n  getFlag: (flagKey: string) => Flag;\n  setFlag: (flagKey: string, flag: Flag) => void;\n  // internal data\n  getInternalData: () => InternalData;\n  setInternalData: (i: Partial<InternalData>) => void;\n}\n\ntype ContextDetails = {\n  clientKey: string,\n  clientConfig: Config,\n  userIdentity: Identity\n}\n\n// Utility functions\nconst storageAvailable = () => {\n  try {\n    const storage = window.localStorage;\n    const x = '__storage_test__';\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n\nconst saveToStorage = (prefix: string, key: string, value: object) => {\n  if (storageAvailable()) {\n    window.localStorage.setItem(`${prefix}_${key}`, JSON.stringify(value));\n  }\n};\n\nconst loadFromStorage = (prefix: string, key: string, defaultValue: object) => {\n  if (storageAvailable()) {\n    const value = window.localStorage.getItem(`${prefix}_${key}`);\n    if (value !== null) {\n      return JSON.parse(value);\n    }\n  }\n  return defaultValue;\n};\n\nexport default function Context(clientKey: string, clientConfig: Config, userIdentity: Identity) {\n  let config: Config = {\n    ...DEFAULT_CONFIG,\n    ...clientConfig,\n  };\n  let identity: Identity = {\n    ...DEFAULT_IDENTITY,\n    ...userIdentity,\n  };\n  let flagset: Flagset = {};\n  let internalData: InternalData = {\n    ...DEFAULT_INTERNAL_DATA,\n  };\n\n  const contextDetails: ContextDetails = {\n    clientKey,\n    clientConfig,\n    userIdentity\n  };\n  const contextHash: string = objectHash(contextDetails);\n\n  // Load values from storage, if available\n  const storedFlagset = loadFromStorage(contextHash, \"flagset\", {});\n  const storedInternalData = loadFromStorage(contextHash, \"internalData\", DEFAULT_INTERNAL_DATA);\n\n  config = { ...config };\n  identity = { ...identity };\n  flagset = { ...flagset, ...storedFlagset };\n  internalData = { ...internalData, ...storedInternalData };\n\n  // ... remaining methods ...\n\n   /**\n   * Config methods\n   */\n   const getConfig: IContext[\"getConfig\"] = () => ({ ...config });\n\n   const setConfig: IContext[\"setConfig\"] = (clientConfig) => {\n     config = {\n       ...config,\n       ...clientConfig,\n     };\n   };\n \n   /**\n    * Identity methods\n    */\n   const getIdentity: IContext[\"getIdentity\"] = () => ({ ...identity });\n \n   const setIdentity: IContext[\"setIdentity\"] = (userIdentity) => {\n     identity = {\n       ...identity,\n       ...userIdentity,\n     };\n   };\n \n   const getIdentityTraits: IContext[\"getIdentityTraits\"] = () => ({\n     ...identity.traits,\n   });\n \n   const setIdentityTraits: IContext[\"setIdentityTraits\"] = (identityTraits) => {\n     identity = {\n       ...identity,\n       traits: {\n         ...identity.traits,\n         ...identityTraits,\n       },\n     };\n   };\n \n   /**\n    * Flagset methods\n    */\n   const getAllFlags: IContext[\"getAllFlags\"] = () => ({ ...flagset });\n \n   const getFlag: IContext[\"getFlag\"] = (flagKey) => ({ ...flagset[flagKey] });\n \n   const setFlag: IContext[\"setFlag\"] = (flagKey, flag) => {\n     flagset[flagKey] = flag;\n     saveToStorage(contextHash, \"flagset\", flagset);\n   };\n \n   /**\n    * Internal data methods\n    */\n   const getInternalData: IContext[\"getInternalData\"] = () => ({\n     ...internalData,\n   });\n \n   const setInternalData: IContext[\"setInternalData\"] = (userInternalData) => {\n     internalData = { ...internalData, ...userInternalData };\n     saveToStorage(contextHash, \"internalData\", internalData);\n   };\n \n   return {\n     // config\n     getConfig,\n     setConfig,\n     // identity\n     getIdentity,\n     setIdentity,\n     getIdentityTraits,\n     setIdentityTraits,\n     // flagset\n     getAllFlags,\n     getFlag,\n     setFlag,\n     // internal data\n     getInternalData,\n     setInternalData,\n   };\n}\n\n","export type Evaluations = {\n  type: string;\n  attributes: Flag;\n}[];\n\nexport type Flagset = {\n  [flagKey: string]: Flag;\n};\n\nexport type Flag = {\n  flagKey: string;\n  variationKey: string;\n  reason: REASONS;\n};\n\nexport enum REASONS {\n  FALLTHROUGH = \"FALLTHROUGH\",\n  FALLTHROUGH_WEIGHTED = \"FALLTHROUGH_WEIGHTED\",\n  TARGETED = \"TARGETED\",\n  TARGETED_WEIGHTED = \"TARGETED_WEIGHTED\",\n  DEFAULT_FALLTHROUGH = \"DEFAULT_FALLTHROUGH\",\n}\n","export type Identity = {\n  identifier: string;\n  traits: {\n    [key: string]: string | number;\n  };\n};\n\nexport const DEFAULT_IDENTITY: Identity = {\n  identifier: '',\n  traits: {}\n}\n","import Context, { IContext } from './context';\nimport { Mode, Config, DEFAULT_CONFIG } from './config'\nimport { Evaluations, Flag, Flagset, REASONS } from './flags';\nimport { Identity, DEFAULT_IDENTITY } from './identity';\nimport { InternalData, DEFAULT_INTERNAL_DATA } from './internal-data';\n\nexport {\n    IContext,\n    Mode,\n    DEFAULT_CONFIG,\n    REASONS,\n    DEFAULT_IDENTITY,    \n    DEFAULT_INTERNAL_DATA\n};\nexport type {\n    Config,\n    Evaluations,\n    Flag,\n    Flagset,\n    Identity,\n    InternalData\n};\nexport default Context;","export type InternalData = {\n  consecutiveCachedRequests: number;\n  consecutiveFailedRequests: number;\n  flagsetChanges: number;\n};\n\nexport const DEFAULT_INTERNAL_DATA: InternalData = {\n  consecutiveCachedRequests: 0,\n  consecutiveFailedRequests: 0,\n  flagsetChanges: 0,\n};\n","export enum EventType {\n  CLIENT_READY = 'client_ready',\n  FLAG_CHANGE = 'flag_change',\n  CONTEXT_CHANGE = 'context_change',\n  NETWORK_FETCH = 'network_fetch',\n  NETWORK_FETCH_FULL = 'network_fetch_full',\n  NETWORK_FETCH_CACHED = 'network_fetch_cached',\n  NETWORK_FETCH_ERROR = 'network_fetch_error',\n  DEBUG = 'debug',\n}\n","import { EventType } from \"./event-type\";\n\ntype ListenerFn = (eventMessage: string, eventContext?: any) => void;\n\ntype EventsMap = {\n  [eventName: string]: {\n    [listenerFnStr: string]: ListenerFn;\n  };\n};\n\nexport interface EventProducer {\n  emit: (\n    eventName: EventType,\n    eventMessage: string,\n    eventContext?: object | string\n  ) => void;\n}\n\nexport interface EventConsumer {\n  on: (eventName: EventType, listenerFn: ListenerFn) => void;\n  off: (eventName: EventType, listenerFn?: ListenerFn) => void;\n  clear: () => void;\n}\n\nexport interface IEvents extends EventProducer, EventConsumer {}\n\nexport default function Events(): IEvents {\n  let events: EventsMap = {};\n\n  const emit: EventProducer[\"emit\"] = (\n    eventName,\n    eventMessage,\n    eventContext\n  ) => {\n    if (!events.hasOwnProperty(eventName)) {\n      return;\n    }\n    Object.values(events[eventName]).forEach((listenerFn) =>\n      listenerFn(eventMessage, eventContext)\n    );\n  };\n\n  const on: EventConsumer[\"on\"] = (eventName, listenerFn) => {\n    if (!events.hasOwnProperty(eventName)) {\n      events[eventName] = {};\n    }\n    if (typeof listenerFn === \"function\") {\n      events[eventName] = {\n        ...events[eventName],\n        [listenerFn.toString()]: listenerFn,\n      };\n    }\n  };\n\n  const off: EventConsumer[\"off\"] = (eventName, listenerFn) => {\n    if (\n      typeof listenerFn === \"function\" &&\n      !events.hasOwnProperty(eventName) &&\n      !events[eventName].hasOwnProperty(listenerFn.toString())\n    ) {\n      return;\n    }\n\n    if (\n      typeof listenerFn === \"function\" &&\n      events.hasOwnProperty(eventName) &&\n      events[eventName].hasOwnProperty(listenerFn.toString())\n    ) {\n      delete events[eventName][listenerFn.toString()];\n    } else if (\n      typeof listenerFn !== \"function\" &&\n      events.hasOwnProperty(eventName)\n    ) {\n      delete events[eventName];\n    }\n  };\n\n  const clear: EventConsumer[\"clear\"] = (): void => {\n    events = {};\n  };\n\n  return {\n    emit,\n    on,\n    off,\n    clear,\n  };\n}\n","import Events, {\n    EventConsumer,\n    EventProducer\n} from './events'\nimport { EventType } from './event-type'\n\nexport {\n    EventConsumer,\n    EventProducer,\n    EventType\n};\nexport default Events;\n","/**\n * Headers\n */\nexport const ETAG_HEADER = \"ETag\";\nexport const SDK_KEY_HEADER = \"x-sdk-key\";\n\n","import { Evaluations, Identity } from \"../context\";\nimport { Config } from \"../context/config\";\nimport { ETAG_HEADER, SDK_KEY_HEADER } from \"./constants\";\n\ntype XHRPollingRequestHeaders = {\n  [key: string]: string;\n};\ntype XHRPollingResponse = {\n  etag: string;\n  status: number;\n  data: Evaluations | {};\n  hasFailed: boolean;\n};\n\nconst pollingRequest = (\n  endpointUrl: string,\n  requestBody: string,\n  headers: XHRPollingRequestHeaders\n): Promise<XHRPollingResponse> => {\n  return new Promise((resolve, _) => {\n    var xhr = new XMLHttpRequest();\n    xhr.open(\"POST\", endpointUrl, true);\n    Object.keys(headers).forEach((k) => xhr.setRequestHeader(k, headers[k]));\n    xhr.onload = function () {\n      if (this.readyState != 4) return;\n      resolve({\n        etag: this.getResponseHeader(ETAG_HEADER) || \"unknown\",\n        status: this.status,\n        hasFailed: !(this.status == 200 || this.status == 304),\n        data: this.status == 200 ? JSON.parse(this.responseText).data : {},\n      });\n    };\n    xhr.onerror = () =>\n      resolve({\n        etag: \"unknown\",\n        status: xhr.status,\n        hasFailed: true,\n        data: {},\n      });\n    xhr.send(requestBody);\n  });\n};\n\nexport const fetchFlagsViaPoller = async (\n  pollingServiceUrl: Config[\"pollingServiceUrl\"],\n  clientKey: string,\n  identity: Identity,\n  etag: string,\n  onFullResponse?: (retag: string, evals: Evaluations) => void,\n  onCachedResponse?: () => void,\n  onErrorResponse?: () => void\n): Promise<[string, Evaluations]> => {\n  const {\n    etag: retag,\n    status,\n    data: evaluations,\n    hasFailed,\n  } = await pollingRequest(\n    String(pollingServiceUrl),\n    JSON.stringify(identity),\n    {\n      [ETAG_HEADER]: etag,\n      [SDK_KEY_HEADER]: clientKey,\n    }\n  );\n\n  if (!hasFailed && status === 200) {\n    typeof onFullResponse === \"function\" && onFullResponse(retag, evaluations as Evaluations);\n  } else if (!hasFailed && status === 304) {\n    typeof onCachedResponse === \"function\" && onCachedResponse();\n  } else if (hasFailed) {\n    typeof onErrorResponse === \"function\" && onErrorResponse();\n  }\n\n  return [retag, Array.isArray(evaluations) ? evaluations : []];\n};\n","import { fetchFlagsViaPoller } from './fetch-flag-via-poller';\n\nexport { fetchFlagsViaPoller };","import Client, {\n    ClientOptions,\n    IClient\n} from './client';\nimport Context, {\n    IContext,\n    Mode,\n    Config,\n    DEFAULT_CONFIG,\n    Evaluations,\n    Flag,\n    Flagset,\n    REASONS,\n    Identity,\n    DEFAULT_IDENTITY,\n    InternalData,\n    DEFAULT_INTERNAL_DATA\n} from './context';\nimport Events, {\n    EventConsumer,\n    EventProducer,\n    EventType\n} from './events';\n\nexport {\n    IClient,\n    Context,\n    IContext,\n    Mode,\n    DEFAULT_CONFIG,\n    REASONS,\n    DEFAULT_IDENTITY,\n    DEFAULT_INTERNAL_DATA,\n    Events,\n    EventConsumer,\n    EventProducer,\n    EventType\n};\nexport type {\n    ClientOptions,\n    Config,\n    Evaluations,\n    Flag,\n    Flagset,\n    Identity,\n    InternalData\n};\nexport default Client;","import Transport, {\n    ITransport\n} from './transport';\n\nexport {\n    ITransport\n};\nexport default Transport;","import { fetchFlagsViaPoller } from \"../fetch\";\nimport { Evaluations, Flagset, IContext } from \"../context\";\nimport { ITransport } from \"./transport\";\nimport { EventProducer } from \"../events\";\nimport { EventType } from \"../events/event-type\";\n// import {\n//   PollerWorkerRequestType,\n//   PollerWorkerResponse,\n//   PollerWorkerResponseType,\n// } from \"./types\";\n// import PollerWorker from \"./poller.worker\";\n\nconst INITIAL_ETAG = \"initial\";\n\nexport default function Poller(\n  clientKey: string,\n  context: IContext,\n  events: EventProducer\n): ITransport {\n  const config = context.getConfig();\n  const pollingServiceUrl = config.pollingServiceUrl;\n  let etag = INITIAL_ETAG;\n\n  const onFullResponse = (retag: string, evaluations: Evaluations) => {\n    if (evaluations?.length) {\n      evaluations.forEach((evaluation) =>\n        context.setFlag(evaluation.attributes.flagKey, evaluation.attributes)\n      );\n      const { flagsetChanges: prevFlagsetChanges } = context.getInternalData();\n      context.setInternalData({\n        flagsetChanges: prevFlagsetChanges + 1,\n      });\n      events.emit(EventType.FLAG_CHANGE, \"Flagset has changed\");\n    }\n\n    if (etag === INITIAL_ETAG && retag !== etag) {\n      events.emit(\n        EventType.CLIENT_READY,\n        \"Client is ready!\"\n      );\n      context.setInternalData({\n        consecutiveCachedRequests: 0,\n        consecutiveFailedRequests: 0,\n      });\n    }\n\n    etag = retag;\n\n    events.emit(\n      EventType.NETWORK_FETCH,\n      \"Retrieved flagset from service.\",\n      context.getAllFlags(),\n    );\n    events.emit(\n      EventType.NETWORK_FETCH_FULL,\n      \"Retrieved full flagset from service.\",\n      context.getInternalData()\n    );\n  };\n\n  const onCachedResponse = () => {\n    const { consecutiveCachedRequests: prevConsecutiveCachedRequests } =\n      context.getInternalData();\n    context.setInternalData({\n      consecutiveCachedRequests: prevConsecutiveCachedRequests + 1,\n      consecutiveFailedRequests: 0,\n    });\n\n    events.emit(\n      EventType.NETWORK_FETCH,\n      \"Retrieved flagset from service.\",\n      context.getAllFlags(),\n    );\n    events.emit(\n      EventType.NETWORK_FETCH_CACHED,\n      \"Retrieved cached flagset from service.\",\n      context.getInternalData()\n    );\n  };\n\n  const onErrorResponse = () => {\n    const { consecutiveFailedRequests: prevConsecutiveFailedRequests } =\n      context.getInternalData();\n    context.setInternalData({\n      consecutiveCachedRequests: 0,\n      consecutiveFailedRequests: prevConsecutiveFailedRequests + 1,\n    });\n    events.emit(\n      EventType.NETWORK_FETCH_ERROR,\n      \"Unable to retrieved flagset from service.\",\n      context.getInternalData()\n    );\n  };\n\n  let start: () => void = () => {};\n  let stop: () => void = () => {};\n\n  // if (typeof Worker !== \"undefined\") {\n  //   // WebWorkers is supported then start polling via web worker\n  //   const pollerWorker = new PollerWorker();\n\n  //   // Handle responses from worker\n  //   pollerWorker.onmessage = (e: MessageEvent) => {\n  //     const { responseType, responsePayload } =\n  //       e.data as PollerWorkerResponse;\n  //     switch (responseType) {\n  //       case PollerWorkerResponseType.FULL:\n  //         const { retag, evaluations } = responsePayload;\n  //         onFullResponse(retag, evaluations);\n  //         break;\n  //       case PollerWorkerResponseType.CACHED:\n  //         onCachedResponse();\n  //         break;\n  //       case PollerWorkerResponseType.ERROR:\n  //         onErrorResponse();\n  //         break;\n  //       default:\n  //         console.error(\n  //           `Unknown response type emitted by poller-worker: ${responseType}`\n  //         );\n  //     }\n  //   };\n\n  //   // send tab active / inactive state to web worker\n  //   if (typeof document.hidden !== \"undefined\") {\n  //     document.addEventListener(\"visibilitychange\", function () {\n  //       pollerWorker.postMessage({\n  //         requestType: document.hidden\n  //           ? PollerWorkerRequestType.TAB_HIDDEN\n  //           : PollerWorkerRequestType.TAB_VISIBLE,\n  //           requestPayload: {}\n  //       });\n  //     });\n  //   }\n\n  //   start = async () => {\n  //     events.emit(\n  //       EventType.NETWORK_FETCH,\n  //       \"Starting to fetch initial flags from poller.\",\n  //       context.getInternalData()\n  //     );\n\n  //     pollerWorker.postMessage({\n  //       requestType: PollerWorkerRequestType.START,\n  //       requestPayload: {\n  //         pollingServiceUrl,\n  //         clientKey,\n  //         identity: context.getIdentity(),\n  //         etag,\n  //         pollingIntervalMs: config.pollingIntervalMs,\n  //       },\n  //     });\n  //   };\n\n  //   stop = async () => {\n  //     pollerWorker.postMessage({\n  //       requestType: PollerWorkerRequestType.STOP,\n  //       requestPayload: {\n  //         pollingServiceUrl,\n  //         clientKey,\n  //         identity: context.getIdentity(),\n  //         etag,\n  //         pollingIntervalMs: config.pollingIntervalMs,\n  //       },\n  //     });\n  //     pollerWorker.terminate();\n  //   };\n  // } else {\n  // commented out web worker implementation\n  if (true) {\n    // Otherwise fallback to using main thread\n    const pollingIntervalMs: number =\n      (config.pollingIntervalMs &&\n        config.pollingIntervalMs >= 3000 &&\n        config.pollingIntervalMs) ||\n      3000;\n\n    let lastRefreshed: number = -1;\n    let timerId: number = setTimeout(() => {}, 1);\n\n    const schedule = async () => {\n      timerId = setTimeout(async () => {\n        await fetchAndReschedule();\n      }, pollingIntervalMs);\n    };\n\n    const fetchAndReschedule = async () => {\n      const elapsedMs = Date.now() - lastRefreshed;\n      // run if initial request, or elapsed time exceeds threshold\n      if (lastRefreshed === -1 || (elapsedMs >= pollingIntervalMs && !document.hidden)) {\n        const [retag] = await fetchFlagsViaPoller(\n          pollingServiceUrl,\n          clientKey,\n          context.getIdentity(),\n          etag,\n          onFullResponse,\n          onCachedResponse,\n          onErrorResponse\n        );\n        etag = retag;\n        lastRefreshed = Date.now();\n      }\n      await schedule();\n    };\n\n    start = async () => {\n      clearTimeout(timerId);\n      await fetchAndReschedule();\n    };\n\n    stop = async () => {\n      clearTimeout(timerId);\n    };\n  }\n\n  return {\n    start,\n    stop,\n  };\n}\n","import { IContext } from \"../context\";\nimport { EventProducer } from \"../events\";\nimport { EventType } from \"../events/event-type\";\nimport { ITransport } from \"./transport\";\n\nexport default function Streamer(clientKey: string, context: IContext, events: EventProducer): ITransport {\n  const NOT_IMPL_MSG = \"Streamer not implemented yet.\"\n\n  const start = () => events.emit(EventType.DEBUG, NOT_IMPL_MSG)\n\n  const stop = () => events.emit(EventType.DEBUG, NOT_IMPL_MSG)\n\n  return {\n    start,\n    stop,\n  };\n}\n","import { Mode, IContext } from \"../context\";\nimport Streamer from \"./streamer\";\nimport Poller from \"./poller\";\nimport { EventProducer } from \"../events\";\n\nexport interface ITransport {\n  start: () => void;\n  stop: () => void;\n}\n\nexport default function Transport(clientKey: string, context: IContext, events: EventProducer): ITransport {\n  return context.getConfig().mode === Mode.STREAMING\n    ? Streamer(clientKey, context, events)\n    : Poller(clientKey, context, events);\n}\n","function hashObject(obj: object) {\n  const str = JSON.stringify(obj);\n  let hash = 0;\n\n  for (let i = 0; i < str.length; i++) {\n    const char = str.charCodeAt(i);\n    hash = (hash << 5) - hash + char;\n    hash = hash & hash; // Convert to 32bit integer\n  }\n\n  return hash.toString(16);\n}\n\nexport default hashObject;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(237);\n"],"names":["root","factory","exports","module","define","amd","this","context","events","getIdentifier","getIdentity","getAllTraits","getIdentityTraits","variation","flagKey","defaultVariationKey","getFlag","variationKey","setIdentifier","identifier","setIdentity","emit","EventType","CONTEXT_CHANGE","getTrait","traitKey","setTrait","traitValue","setIdentityTraits","JSON","stringify","getAllFlags","getInternalData","clientKey","identity","opts","config","mode","Mode","POLLING","transport","api","start","on","off","clear","destroy","stop","DEFAULT_CONFIG","pollingServiceUrl","pollingIntervalMs","storageAvailable","storage","window","localStorage","x","setItem","removeItem","e","saveToStorage","prefix","key","value","loadFromStorage","defaultValue","getItem","parse","clientConfig","userIdentity","DEFAULT_IDENTITY","flagset","internalData","DEFAULT_INTERNAL_DATA","contextDetails","contextHash","storedFlagset","storedInternalData","getConfig","setConfig","traits","identityTraits","setFlag","flag","setInternalData","userInternalData","REASONS","consecutiveCachedRequests","consecutiveFailedRequests","flagsetChanges","eventName","eventMessage","eventContext","hasOwnProperty","Object","values","forEach","listenerFn","toString","ETAG_HEADER","SDK_KEY_HEADER","pollingRequest","endpointUrl","requestBody","headers","Promise","resolve","_","xhr","XMLHttpRequest","open","keys","k","setRequestHeader","onload","readyState","etag","getResponseHeader","status","hasFailed","data","responseText","onerror","send","fetchFlagsViaPoller","async","onFullResponse","onCachedResponse","onErrorResponse","retag","evaluations","String","Array","isArray","Context","Events","INITIAL_ETAG","length","evaluation","attributes","prevFlagsetChanges","FLAG_CHANGE","CLIENT_READY","NETWORK_FETCH","NETWORK_FETCH_FULL","prevConsecutiveCachedRequests","NETWORK_FETCH_CACHED","prevConsecutiveFailedRequests","NETWORK_FETCH_ERROR","lastRefreshed","timerId","setTimeout","schedule","fetchAndReschedule","elapsedMs","Date","now","document","hidden","clearTimeout","NOT_IMPL_MSG","DEBUG","STREAMING","obj","str","hash","i","charCodeAt","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}